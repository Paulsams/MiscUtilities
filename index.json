{
  "api/Paulsams.MicsUtils.AssetDatabaseUtilities.FilterKeys.html": {
    "href": "api/Paulsams.MicsUtils.AssetDatabaseUtilities.FilterKeys.html",
    "title": "Class AssetDatabaseUtilities.FilterKeys",
    "keywords": "Class AssetDatabaseUtilities.FilterKeys A class that contains keys for searching using a method: . Inheritance object AssetDatabaseUtilities.FilterKeys Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Paulsams.MicsUtils Assembly: cs.temp.dll.dll Syntax public static class AssetDatabaseUtilities.FilterKeys Fields Prefabs Declaration public const string Prefabs = \"t:prefab\" Field Value Type Description string Scenes Declaration public const string Scenes = \"t:scene\" Field Value Type Description string ScriptableObjects Declaration public const string ScriptableObjects = \"t:ScriptableObject\" Field Value Type Description string"
  },
  "api/Paulsams.MicsUtils.AssetDatabaseUtilities.html": {
    "href": "api/Paulsams.MicsUtils.AssetDatabaseUtilities.html",
    "title": "Class AssetDatabaseUtilities",
    "keywords": "Class AssetDatabaseUtilities Utilities associated with class: . Inheritance object AssetDatabaseUtilities Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Paulsams.MicsUtils Assembly: cs.temp.dll.dll Syntax public static class AssetDatabaseUtilities Methods GetAllScenesInAssets() Saves the current context of open scenes, lazily opens all scenes as they are fed out using an iterator, and restores the context at the end. Declaration public static IEnumerable<Scene> GetAllScenesInAssets() Returns Type Description IEnumerable<><Scene> Iterator all scenes (after all, to get GO from a scene, you need to open it, unfortunately)."
  },
  "api/Paulsams.MicsUtils.CodeGeneration.BaseCodeGeneratorFromTemplate.FileCreateInfo.html": {
    "href": "api/Paulsams.MicsUtils.CodeGeneration.BaseCodeGeneratorFromTemplate.FileCreateInfo.html",
    "title": "Struct BaseCodeGeneratorFromTemplate.FileCreateInfo",
    "keywords": "Struct BaseCodeGeneratorFromTemplate.FileCreateInfo Description of the file that will be generated when invoke Create(string, string, string, string). Inherited Members System.ValueType.Equals(object) System.ValueType.GetHashCode() System.ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Paulsams.MicsUtils.CodeGeneration Assembly: cs.temp.dll.dll Syntax public struct BaseCodeGeneratorFromTemplate.FileCreateInfo Fields FileName Declaration public readonly string FileName Field Value Type Description string Namespace Declaration public readonly string Namespace Field Value Type Description string PathToFolder Declaration public readonly string PathToFolder Field Value Type Description string TemplateScript Declaration public readonly string TemplateScript Field Value Type Description string Methods Create(string, string, string, string) Declaration public static BaseCodeGeneratorFromTemplate.FileCreateInfo Create(string templateScript, string fileName, string pathToFolder, string @namespace = null) Parameters Type Name Description string templateScript string fileName string pathToFolder string namespace Returns Type Description BaseCodeGeneratorFromTemplate.FileCreateInfo CreateWithNamespaceFromPath(string, string, string, string) Declaration public static BaseCodeGeneratorFromTemplate.FileCreateInfo CreateWithNamespaceFromPath(string templateScript, string fileName, string absolutePathToFolder, string relativePathInUnityProject) Parameters Type Name Description string templateScript string fileName string absolutePathToFolder string relativePathInUnityProject Returns Type Description BaseCodeGeneratorFromTemplate.FileCreateInfo CreateWithNamespaceFromPath(string, string, string) Declaration public static BaseCodeGeneratorFromTemplate.FileCreateInfo CreateWithNamespaceFromPath(string templateScript, string fileName, string relativePathInUnityProject) Parameters Type Name Description string templateScript string fileName string relativePathInUnityProject Returns Type Description BaseCodeGeneratorFromTemplate.FileCreateInfo"
  },
  "api/Paulsams.MicsUtils.CodeGeneration.BaseCodeGeneratorFromTemplate.html": {
    "href": "api/Paulsams.MicsUtils.CodeGeneration.BaseCodeGeneratorFromTemplate.html",
    "title": "Class BaseCodeGeneratorFromTemplate",
    "keywords": "Class BaseCodeGeneratorFromTemplate Base class for generating C# scripts based on template script. That is, you can create your own successor somewhere from the outside and call the method: Create(). I’ll say in advance that the example is a little artificial, since it’s always better to put general logic into templates, but I just wanted an extensive example. Example template script: using UnityEngine; #NamespaceBegin# public abstract class #ClassName# : MonoBehaviour { private void Awake() { Debug.Log(#CustomMethod#()); } #CustomMethod# } #NamespaceEnd# Example implementation of generator: public class ExampleGenerator : BaseCodeGeneratorFromTemplate { private const string _pathToTemplate = \"Assets/ExampleGenerator.txt\"; private const string _classNameKey = \"ClassName\"; private const string _customMethodNameKey = \"CustomMethodName\"; private const string _customMethodKey = \"CustomMethod\"; protected override string TextError => $\"{nameof(ExampleGenerator)} failed to generate code.\"; private readonly string _templateScriptText = AssetDatabase.LoadAssetAtPath<TextAsset>(_pathToTemplate).text; protected override IEnumerable<FileCreateInfo> OnSetPropertiesAndGetFileCreateInfos() { var inserter = new InserterCode(); yield return CreateFileInfo(inserter, \"Test1\", \"MyCustomMethod1\", new[] { \"Test1_1, Test1_2\" }); inserter.Clear(); yield return CreateFileInfo(inserter, \"Test2\", \"MyCustomMethod2\", new[] { \"Test2_1, Test2_2\", \"Test2_3\" }); } private FileCreateInfo CreateFileInfo(InserterCode inserter, string fileName, string methodName, string[] randomizeLogs) { KeyToBlockCode[_classNameKey] = fileName; KeyToBlockCode[_customMethodNameKey] = methodName; inserter.AppendLine($\"private string {methodName}()\"); inserter.AppendOpeningBrace(); { inserter.AppendLine($\"return Random.Range(0, {randomizeLogs.Length}) switch\"); inserter.AppendOpeningBrace(); { for (int i = 0; i < randomizeLogs.Length; ++i) inserter.AppendLine($\"{i} => \\\"{randomizeLogs[i]}\\\",\"); } inserter.AppendBreakingBrace(true); } inserter.AppendBreakingBrace(); KeyToBlockCode[_customMethodKey] = inserter.ToString(); return FileCreateInfo.Create(_templateScriptText, fileName, \"Assets\", \"TestNamespace\"); } } Inheritance object BaseCodeGeneratorFromTemplate Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Paulsams.MicsUtils.CodeGeneration Assembly: cs.temp.dll.dll Syntax public abstract class BaseCodeGeneratorFromTemplate Fields KeyToBlockCode Dictionary of keys that the parser will access if it finds such a pattern #ExampleKey#. Declaration protected readonly Dictionary<string, string> KeyToBlockCode Field Value Type Description Dictionary<, ><string, string> Properties TextError Declaration protected abstract string TextError { get; } Property Value Type Description string Methods Create() Invoke code generation. Declaration public void Create() OnSetPropertiesAndGetFileCreateInfos() It should return a collection of information about the files that will be filled with code. And it’s best to do it through iterator, since you can change KeyToBlockCode before each new file. Declaration protected abstract IEnumerable<BaseCodeGeneratorFromTemplate.FileCreateInfo> OnSetPropertiesAndGetFileCreateInfos() Returns Type Description IEnumerable<><FileCreateInfo>"
  },
  "api/Paulsams.MicsUtils.CodeGeneration.BaseCodeGeneratorFromTemplate.InserterCode.html": {
    "href": "api/Paulsams.MicsUtils.CodeGeneration.BaseCodeGeneratorFromTemplate.InserterCode.html",
    "title": "Class BaseCodeGeneratorFromTemplate.InserterCode",
    "keywords": "Class BaseCodeGeneratorFromTemplate.InserterCode Class that provides an abstraction over with a focus on C# code generation. Inheritance object BaseCodeGeneratorFromTemplate.InserterCode Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Paulsams.MicsUtils.CodeGeneration Assembly: cs.temp.dll.dll Syntax protected class BaseCodeGeneratorFromTemplate.InserterCode Constructors InserterCode() Declaration public InserterCode() InserterCode(int) Declaration public InserterCode(int capacity) Parameters Type Name Description int capacity Fields Builder Declaration public readonly StringBuilder Builder Field Value Type Description StringBuilder Methods Append(string) Declaration public void Append(string text) Parameters Type Name Description string text AppendBreakingBrace(bool) Declaration public void AppendBreakingBrace(bool semicolon = false) Parameters Type Name Description bool semicolon AppendLine(string) Declaration public void AppendLine(string text) Parameters Type Name Description string text AppendOpeningBrace() Declaration public void AppendOpeningBrace() AppendTabs() Declaration public void AppendTabs() AppendWithTabs(string) Declaration public void AppendWithTabs(string text) Parameters Type Name Description string text Clear() Declaration public void Clear() DecrementCountTabs() Declaration public void DecrementCountTabs() IncrementCountTabs() Declaration public void IncrementCountTabs() SkipLine() Declaration public void SkipLine() ToString() Declaration public override string ToString() Returns Type Description string Overrides object.ToString()"
  },
  "api/Paulsams.MicsUtils.CodeGeneration.html": {
    "href": "api/Paulsams.MicsUtils.CodeGeneration.html",
    "title": "Namespace Paulsams.MicsUtils.CodeGeneration",
    "keywords": "Namespace Paulsams.MicsUtils.CodeGeneration Classes BaseCodeGeneratorFromTemplate Base class for generating C# scripts based on template script. That is, you can create your own successor somewhere from the outside and call the method: Create(). I’ll say in advance that the example is a little artificial, since it’s always better to put general logic into templates, but I just wanted an extensive example. Example template script: using UnityEngine; #NamespaceBegin# public abstract class #ClassName# : MonoBehaviour { private void Awake() { Debug.Log(#CustomMethod#()); } #CustomMethod# } #NamespaceEnd# Example implementation of generator: public class ExampleGenerator : BaseCodeGeneratorFromTemplate { private const string _pathToTemplate = \"Assets/ExampleGenerator.txt\"; private const string _classNameKey = \"ClassName\"; private const string _customMethodNameKey = \"CustomMethodName\"; private const string _customMethodKey = \"CustomMethod\"; protected override string TextError => $\"{nameof(ExampleGenerator)} failed to generate code.\"; private readonly string _templateScriptText = AssetDatabase.LoadAssetAtPath<TextAsset>(_pathToTemplate).text; protected override IEnumerable<FileCreateInfo> OnSetPropertiesAndGetFileCreateInfos() { var inserter = new InserterCode(); yield return CreateFileInfo(inserter, \"Test1\", \"MyCustomMethod1\", new[] { \"Test1_1, Test1_2\" }); inserter.Clear(); yield return CreateFileInfo(inserter, \"Test2\", \"MyCustomMethod2\", new[] { \"Test2_1, Test2_2\", \"Test2_3\" }); } private FileCreateInfo CreateFileInfo(InserterCode inserter, string fileName, string methodName, string[] randomizeLogs) { KeyToBlockCode[_classNameKey] = fileName; KeyToBlockCode[_customMethodNameKey] = methodName; inserter.AppendLine($\"private string {methodName}()\"); inserter.AppendOpeningBrace(); { inserter.AppendLine($\"return Random.Range(0, {randomizeLogs.Length}) switch\"); inserter.AppendOpeningBrace(); { for (int i = 0; i < randomizeLogs.Length; ++i) inserter.AppendLine($\"{i} => \\\"{randomizeLogs[i]}\\\",\"); } inserter.AppendBreakingBrace(true); } inserter.AppendBreakingBrace(); KeyToBlockCode[_customMethodKey] = inserter.ToString(); return FileCreateInfo.Create(_templateScriptText, fileName, \"Assets\", \"TestNamespace\"); } } BaseCodeGeneratorFromTemplate.InserterCode Class that provides an abstraction over with a focus on C# code generation. Structs BaseCodeGeneratorFromTemplate.FileCreateInfo Description of the file that will be generated when invoke Create(string, string, string, string)."
  },
  "api/Paulsams.MicsUtils.CollectionExtensions.html": {
    "href": "api/Paulsams.MicsUtils.CollectionExtensions.html",
    "title": "Class CollectionExtensions",
    "keywords": "Class CollectionExtensions Utilities related to . Inheritance object CollectionExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Paulsams.MicsUtils Assembly: cs.temp.dll.dll Syntax public static class CollectionExtensions Methods FindMaxDistanceElementOrDefault<T>(IEnumerable<T>, Vector3, Func<T, T, bool>) Finds maximum vector by distance in collection from passed vector. Declaration public static T FindMaxDistanceElementOrDefault<T>(this IEnumerable<T> source, Vector3 position, Func<T, T, bool> additionally = null) where T : Component Parameters Type Name Description IEnumerable<><T> source Input collection. Vector3 position The position from which maximum is calculated. Func<, , ><T, T, bool> additionally Additional optional check implemented through a delegate. Returns Type Description T Type Parameters Name Description T Since it should be inherited from , I take . FindMaxDistanceElementOrDefault<T>(IEnumerable<T>, Vector3, Func<T, Vector3>, Func<T, T, bool>) Finds maximum vector by distance in collection from passed vector. Declaration public static T FindMaxDistanceElementOrDefault<T>(this IEnumerable<T> source, Vector3 position, Func<T, Vector3> getVector, Func<T, T, bool> additionally = null) Parameters Type Name Description IEnumerable<><T> source Input collection. Vector3 position The position from which maximum is calculated. Func<, ><T, Vector3> getVector A delegate that will return position associated with T. Func<, , ><T, T, bool> additionally Additional optional check implemented through a delegate. Returns Type Description T Type Parameters Name Description T Any type from which position is taken using getVector. FindMinDistanceElementOrDefault<T>(IEnumerable<T>, Vector3, Func<T, T, bool>) Finds minimum vector by distance in collection from passed vector. Declaration public static T FindMinDistanceElementOrDefault<T>(this IEnumerable<T> source, Vector3 position, Func<T, T, bool> additionally = null) where T : Component Parameters Type Name Description IEnumerable<><T> source Input collection. Vector3 position The position from which minimum is calculated. Func<, , ><T, T, bool> additionally Additional optional check implemented through a delegate. Returns Type Description T Type Parameters Name Description T Since it should be inherited from , I take . FindMinDistanceElementOrDefault<T>(IEnumerable<T>, Vector3, Func<T, Vector3>, Func<T, T, bool>) Finds minimum vector by distance in collection from passed vector. Declaration public static T FindMinDistanceElementOrDefault<T>(this IEnumerable<T> source, Vector3 position, Func<T, Vector3> getVector, Func<T, T, bool> additionally = null) Parameters Type Name Description IEnumerable<><T> source Input collection. Vector3 position The position from which minimum is calculated. Func<, ><T, Vector3> getVector A delegate that will return position associated with T. Func<, , ><T, T, bool> additionally Additional optional check implemented through a delegate. Returns Type Description T Type Parameters Name Description T Any type from which position is taken using getVector."
  },
  "api/Paulsams.MicsUtils.DictionaryExtensions.html": {
    "href": "api/Paulsams.MicsUtils.DictionaryExtensions.html",
    "title": "Class DictionaryExtensions",
    "keywords": "Class DictionaryExtensions Utilities related to . Inheritance object DictionaryExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Paulsams.MicsUtils Assembly: cs.temp.dll.dll Syntax public static class DictionaryExtensions Methods KeyByValue<TKey, TValue>(IDictionary<TKey, TValue>, TValue) Allows you to get a key by value. It works by O(n), so use it knowing what you are doing. Declaration public static TKey KeyByValue<TKey, TValue>(this IDictionary<TKey, TValue> dictionary, TValue value) Parameters Type Name Description IDictionary<, ><TKey, TValue> dictionary where keys and values will be taken from. TValue value The value that will be compared using . Returns Type Description TKey Returns the found key, or default. Type Parameters Name Description TKey TValue"
  },
  "api/Paulsams.MicsUtils.EditorWindowUtility.html": {
    "href": "api/Paulsams.MicsUtils.EditorWindowUtility.html",
    "title": "Class EditorWindowUtility",
    "keywords": "Class EditorWindowUtility Utilities associated with class: . Inheritance object EditorWindowUtility Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Paulsams.MicsUtils Assembly: cs.temp.dll.dll Syntax public static class EditorWindowUtility Methods CreateWindow<T>() Always creates a new . Declaration public static T CreateWindow<T>() where T : EditorWindow Returns Type Description T Type Parameters Name Description T GetWindowWithoutShow<T>() Get a window if it already exists or create a new one otherwise. Can be useful if you want to get a window and do early initialization. Declaration public static T GetWindowWithoutShow<T>() where T : EditorWindow Returns Type Description T Type Parameters Name Description T"
  },
  "api/Paulsams.MicsUtils.GameObjectLayer.html": {
    "href": "api/Paulsams.MicsUtils.GameObjectLayer.html",
    "title": "Struct GameObjectLayer",
    "keywords": "Struct GameObjectLayer Аllows you to select a layer in the inspector without bit shift operators, that is, for comparison with GameObject.layer. Inherited Members System.ValueType.Equals(object) System.ValueType.GetHashCode() System.ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Paulsams.MicsUtils Assembly: cs.temp.dll.dll Syntax [Serializable] public struct GameObjectLayer Operators implicit operator int(GameObjectLayer) Declaration public static implicit operator int(GameObjectLayer layer) Parameters Type Name Description GameObjectLayer layer Returns Type Description int implicit operator GameObjectLayer(int) Declaration public static implicit operator GameObjectLayer(int x) Parameters Type Name Description int x Returns Type Description GameObjectLayer"
  },
  "api/Paulsams.MicsUtils.GameObjectLayerDrawer.html": {
    "href": "api/Paulsams.MicsUtils.GameObjectLayerDrawer.html",
    "title": "Class GameObjectLayerDrawer",
    "keywords": "Class GameObjectLayerDrawer Inheritance object GameObjectLayerDrawer Namespace: Paulsams.MicsUtils Assembly: cs.temp.dll.dll Syntax public class GameObjectLayerDrawer : PropertyDrawer Methods OnGUI(Rect, SerializedProperty, GUIContent) Declaration public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) Parameters Type Name Description Rect position SerializedProperty property GUIContent label"
  },
  "api/Paulsams.MicsUtils.html": {
    "href": "api/Paulsams.MicsUtils.html",
    "title": "Namespace Paulsams.MicsUtils",
    "keywords": "Namespace Paulsams.MicsUtils Classes AssetDatabaseUtilities Utilities associated with class: . AssetDatabaseUtilities.FilterKeys A class that contains keys for searching using a method: . CollectionExtensions Utilities related to . DictionaryExtensions Utilities related to . EditorWindowUtility Utilities associated with class: . GameObjectLayerDrawer IgnoreAttribute Attribute allows you to ignore field itself for inspector and immediately draw all child fields. IgnoreAttributeDrawer ListExtensions Utilities related to . Math2DUtility Utilities related to 2D mathematics. Currently all methods involve 2D angles. PhysicsUtilities Utilities related to 3D Physics. ReflectionExtensions Extension methods for different classes, but they all involve reflection. ReflectionUtilities Utilities methods for different classes, but they all involve reflection. SceneUtilities Scene-related utilities. SerializedPropertyExtensions Extension methods for class: . SerializedPropertyRuntimeUtilities Provides methods for using reflection to repeat certain logic of at runtime. SerializedPropertyUtilities Utilities associated with class: . ShowUnityObjectAttribute Allows you to draw a dropdown inside which the UnityEngine.Object fields will be drawn. For example: ScriptableObject. ShowUnityObjectAttributeDrawer StringExtensions String-related utilities. VisualElementsUtilities Utilities associated with class: . Structs GameObjectLayer Аllows you to select a layer in the inspector without bit shift operators, that is, for comparison with GameObject.layer. Enums SerializedPropertyFieldType Auxiliary enam to separate parts of the array from the other."
  },
  "api/Paulsams.MicsUtils.IgnoreAttribute.html": {
    "href": "api/Paulsams.MicsUtils.IgnoreAttribute.html",
    "title": "Class IgnoreAttribute",
    "keywords": "Class IgnoreAttribute Attribute allows you to ignore field itself for inspector and immediately draw all child fields. Inheritance object IgnoreAttribute Namespace: Paulsams.MicsUtils Assembly: cs.temp.dll.dll Syntax public class IgnoreAttribute : PropertyAttribute"
  },
  "api/Paulsams.MicsUtils.IgnoreAttributeDrawer.html": {
    "href": "api/Paulsams.MicsUtils.IgnoreAttributeDrawer.html",
    "title": "Class IgnoreAttributeDrawer",
    "keywords": "Class IgnoreAttributeDrawer Inheritance object IgnoreAttributeDrawer Namespace: Paulsams.MicsUtils Assembly: cs.temp.dll.dll Syntax public class IgnoreAttributeDrawer : PropertyDrawer Methods GetPropertyHeight(SerializedProperty, GUIContent) Declaration public override float GetPropertyHeight(SerializedProperty property, GUIContent label) Parameters Type Name Description SerializedProperty property GUIContent label Returns Type Description float OnGUI(Rect, SerializedProperty, GUIContent) Declaration public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) Parameters Type Name Description Rect position SerializedProperty property GUIContent label"
  },
  "api/Paulsams.MicsUtils.ListExtensions.html": {
    "href": "api/Paulsams.MicsUtils.ListExtensions.html",
    "title": "Class ListExtensions",
    "keywords": "Class ListExtensions Utilities related to . Inheritance object ListExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Paulsams.MicsUtils Assembly: cs.temp.dll.dll Syntax public static class ListExtensions Methods Clone<T>(IEnumerable<T>) If the T type inherits from , then it creates a new sheet and calls the method on each element Declaration public static List<T> Clone<T>(this IEnumerable<T> source) where T : ICloneable Parameters Type Name Description IEnumerable<><T> source Returns Type Description List<><T> A new sheet where all the elements have been cloned. Type Parameters Name Description T Resize<T>(List<T>, int) Change the sheet size. If there was a larger size, then the elements at the end will be removed. If size was insufficient, then default elements will be added to the end. Declaration public static void Resize<T>(this List<T> list, int needSize) Parameters Type Name Description List<><T> list Input list. int needSize The size that the sheet will have after executing this method. Type Parameters Name Description T"
  },
  "api/Paulsams.MicsUtils.Math2DUtility.html": {
    "href": "api/Paulsams.MicsUtils.Math2DUtility.html",
    "title": "Class Math2DUtility",
    "keywords": "Class Math2DUtility Utilities related to 2D mathematics. Currently all methods involve 2D angles. Inheritance object Math2DUtility Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Paulsams.MicsUtils Assembly: cs.temp.dll.dll Syntax public static class Math2DUtility Methods ClampAngle(float) Clamp angle in the range [-180; 180). Declaration public static float ClampAngle(float angle) Parameters Type Name Description float angle Any angle in degrees. Returns Type Description float Аngle in the range [-180; 180). GetAngleFromVector(Vector2) Allows you to get an angle based on the direction in the trigonometric system. Declaration public static float GetAngleFromVector(Vector2 direction) Parameters Type Name Description Vector2 direction Normalized direction required. Returns Type Description float Angle in [0; 360) degrees. GetVectorFromAngle(float) Allows you to get directions based on angle in the trigonometric system. Declaration public static Vector2 GetVectorFromAngle(float angle) Parameters Type Name Description float angle Angle in degrees. Returns Type Description Vector2 Normalized direction. NearestAngle(float, float) Finds the nearest angle relative to the step. Declaration public static float NearestAngle(float angle, float stepRotation) Parameters Type Name Description float angle Angle in degrees. float stepRotation Step rotation in [0; 360). Returns Type Description float NearestAngle(float, float[]) Finds the nearest angle relative to the array of angles [-180; 180]. Declaration public static float NearestAngle(float angle, float[] endAngles) Parameters Type Name Description float angle Angle in [0; 360] degrees. float[] endAngles Arrays nearested angles in [-180; 180] degrees. Returns Type Description float Angle in [0; 360] degrees."
  },
  "api/Paulsams.MicsUtils.PhysicsUtilities.html": {
    "href": "api/Paulsams.MicsUtils.PhysicsUtilities.html",
    "title": "Class PhysicsUtilities",
    "keywords": "Class PhysicsUtilities Utilities related to 3D Physics. Inheritance object PhysicsUtilities Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Paulsams.MicsUtils Assembly: cs.temp.dll.dll Syntax public static class PhysicsUtilities Methods IgnoreCollision(IList<Collider>, IList<Collider>, bool) Allows you to mutually ignore collisions between two collections. Declaration public static void IgnoreCollision(IList<Collider> collidersFirst, IList<Collider> collidersSecond, bool state) Parameters Type Name Description IList<><Collider> collidersFirst IList<><Collider> collidersSecond bool state"
  },
  "api/Paulsams.MicsUtils.ReflectionExtensions.html": {
    "href": "api/Paulsams.MicsUtils.ReflectionExtensions.html",
    "title": "Class ReflectionExtensions",
    "keywords": "Class ReflectionExtensions Extension methods for different classes, but they all involve reflection. Inheritance object ReflectionExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Paulsams.MicsUtils Assembly: cs.temp.dll.dll Syntax public static class ReflectionExtensions Methods GetPublicConstFields<T>(Type, bool) Get all public constant fields of a class. Declaration public static IEnumerable<T> GetPublicConstFields<T>(this Type type, bool checkForAssignableType = false) Parameters Type Name Description Type type The class System.Type from which the field data will be taken. bool checkForAssignableType Will types inherited from T be returned? Returns Type Description IEnumerable<><T> Type Parameters Name Description T GetPublicStaticReadonlyFields<T>(Type, bool) Get all public static reaonly fields of a class. Declaration public static IEnumerable<T> GetPublicStaticReadonlyFields<T>(this Type type, bool checkForAssignableType = false) Parameters Type Name Description Type type The class System.Type from which the field data will be taken. bool checkForAssignableType Will types inherited from T be returned? Returns Type Description IEnumerable<><T> Type Parameters Name Description T"
  },
  "api/Paulsams.MicsUtils.ReflectionUtilities.html": {
    "href": "api/Paulsams.MicsUtils.ReflectionUtilities.html",
    "title": "Class ReflectionUtilities",
    "keywords": "Class ReflectionUtilities Utilities methods for different classes, but they all involve reflection. Inheritance object ReflectionUtilities Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Paulsams.MicsUtils Assembly: cs.temp.dll.dll Syntax public static class ReflectionUtilities Methods CopyFieldsFromSourceToDestination(object, object) Allows you to copy fields from completely different classes if they have the same System.Type and System.Reflection.FieldInfo.Name. Works on the basis of reflection. Declaration public static void CopyFieldsFromSourceToDestination(object source, object destination) Parameters Type Name Description object source object where field values are taken from. object destination object where values will be copied. CreateObjectByDefaultConstructorOrUnitializedObject(Type) It will return a new object depending on type - if it has a constructor without arguments, it will create it through it, or through System.Runtime.Serialization.FormatterServices.GetUninitializedObject(System.Type). Declaration public static object CreateObjectByDefaultConstructorOrUnitializedObject(Type type) Parameters Type Name Description Type type Returns Type Description object GetAllTypesInCurrentDomain() Get collection of all types in the current domain. Declaration public static IEnumerable<Type> GetAllTypesInCurrentDomain() Returns Type Description IEnumerable<><Type> GetArrayOrListElementTypeOrThisType(Type) If type is an System.Array or , it will return the type of the collection element, or return the same type. Declaration public static Type GetArrayOrListElementTypeOrThisType(Type type) Parameters Type Name Description Type type Returns Type Description Type GetFinalAssignableTypesFromAllTypes(Type) Find out all Types that are inherited from a given Type and are not abstract or interfaces. Declaration public static IEnumerable<Type> GetFinalAssignableTypesFromAllTypes(Type baseType) Parameters Type Name Description Type baseType base type from which check will take place. Returns Type Description IEnumerable<><Type>"
  },
  "api/Paulsams.MicsUtils.SceneUtilities.html": {
    "href": "api/Paulsams.MicsUtils.SceneUtilities.html",
    "title": "Class SceneUtilities",
    "keywords": "Class SceneUtilities Scene-related utilities. Inheritance object SceneUtilities Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Paulsams.MicsUtils Assembly: cs.temp.dll.dll Syntax public static class SceneUtilities Methods GetAllComponentsInActiveScenes<T>() Get all components with T type from current scenes. Declaration public static IEnumerable<T> GetAllComponentsInActiveScenes<T>() where T : Component Returns Type Description IEnumerable<><T> Type Parameters Name Description T GetAllGameObjectInActiveScenes() Get all from current scenes. Declaration public static IEnumerable<GameObject> GetAllGameObjectInActiveScenes() Returns Type Description IEnumerable<><GameObject>"
  },
  "api/Paulsams.MicsUtils.SerializedPropertyExtensions.html": {
    "href": "api/Paulsams.MicsUtils.SerializedPropertyExtensions.html",
    "title": "Class SerializedPropertyExtensions",
    "keywords": "Class SerializedPropertyExtensions Extension methods for class: . Inheritance object SerializedPropertyExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Paulsams.MicsUtils Assembly: cs.temp.dll.dll Syntax public static class SerializedPropertyExtensions Methods CopyValueToOtherProperty(SerializedProperty, SerializedProperty, bool, Func<SerializedProperty, SerializedProperty, bool>) Copies all data from one to another . Declaration public static void CopyValueToOtherProperty(this SerializedProperty source, SerializedProperty destination, bool applyWithIsUndo, Func<SerializedProperty, SerializedProperty, bool> additionally = null) Parameters Type Name Description SerializedProperty source Where values come from. SerializedProperty destination Where values are copied. bool applyWithIsUndo Применять ли или Func<, , ><SerializedProperty, SerializedProperty, bool> additionally An optional delegate that sorts the copy value. If it returns false, then iteration through children does not occur either. GetChildren(SerializedProperty) Getting all the children . Declaration public static IEnumerable<SerializedProperty> GetChildren(this SerializedProperty property) Parameters Type Name Description SerializedProperty property Родительский . Returns Type Description IEnumerable<><SerializedProperty> Iterator returning children. GetFieldInfoFromPropertyPath(SerializedProperty) Gives a lot of information related to reflection based on . Declaration public static (FieldInfo field, SerializedPropertyFieldType serializedPropertyFieldType, int? indexArrayElement, object parentObject, object currentObject) GetFieldInfoFromPropertyPath(this SerializedProperty property) Parameters Type Name Description SerializedProperty property can be of any type Returns Type Description (FieldInfo field, SerializedPropertyFieldType serializedPropertyFieldType, int? indexArrayElement, object parentObject, object currentObject) Tuple elements: at . SerializedPropertyFieldType — additional information about property. Index in the array if SerializedPropertyFieldType equals ArrayElement. Parent object. Object received from . GetManagedReferenceFieldType(SerializedProperty) Gives field to if the type is equal to . Declaration public static Type GetManagedReferenceFieldType(this SerializedProperty property) Parameters Type Name Description SerializedProperty property The property type is assumed to be . Returns Type Description Type GetManagedReferenceFullType(SerializedProperty) Gives this object to if the type is equal to . Declaration public static Type GetManagedReferenceFullType(this SerializedProperty property) Parameters Type Name Description SerializedProperty property The property type is assumed to be . Returns Type Description Type GetManagedReferenceValueFromPropertyPath(SerializedProperty) Allows you to get a managedReferenceValue that does not depend on the engine version. Declaration public static object GetManagedReferenceValueFromPropertyPath(this SerializedProperty property) Parameters Type Name Description SerializedProperty property The property type is assumed to be . Returns Type Description object GetParentProperty(SerializedProperty) Получение родительского . IMPORTNANT: will not work if - it returns true. Declaration public static SerializedProperty GetParentProperty(this SerializedProperty property) Parameters Type Name Description SerializedProperty property from which the parent is taken. Returns Type Description SerializedProperty Parent . GetTypeObjectReference(SerializedProperty) Gives UnityEgine.Object to if the type is equal to . Declaration public static Type GetTypeObjectReference(this SerializedProperty property) Parameters Type Name Description SerializedProperty property The property type is assumed to be . Returns Type Description Type GetValueFromPropertyPath(SerializedProperty) Get an object through reflection on property path. Works like in new versions of the engine. Declaration public static object GetValueFromPropertyPath(this SerializedProperty property) Parameters Type Name Description SerializedProperty property can be of any type. Returns Type Description object SetValueFromPropertyPath(SerializedProperty, object) Sets the value using reflection on property path. Works like in new versions of the engine. Declaration public static void SetValueFromPropertyPath(this SerializedProperty property, object value) Parameters Type Name Description SerializedProperty property can be of any type, except . object value The object that will be set."
  },
  "api/Paulsams.MicsUtils.SerializedPropertyFieldType.html": {
    "href": "api/Paulsams.MicsUtils.SerializedPropertyFieldType.html",
    "title": "Enum SerializedPropertyFieldType",
    "keywords": "Enum SerializedPropertyFieldType Auxiliary enam to separate parts of the array from the other. Namespace: Paulsams.MicsUtils Assembly: cs.temp.dll.dll Syntax public enum SerializedPropertyFieldType Fields Name Description ArrayElement ArraySize None Other"
  },
  "api/Paulsams.MicsUtils.SerializedPropertyRuntimeUtilities.html": {
    "href": "api/Paulsams.MicsUtils.SerializedPropertyRuntimeUtilities.html",
    "title": "Class SerializedPropertyRuntimeUtilities",
    "keywords": "Class SerializedPropertyRuntimeUtilities Provides methods for using reflection to repeat certain logic of at runtime. Inheritance object SerializedPropertyRuntimeUtilities Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Paulsams.MicsUtils Assembly: cs.temp.dll.dll Syntax public static class SerializedPropertyRuntimeUtilities Methods GetFieldInfoFromPropertyPath(object, string) Gives a lot of information related to reflection based on . Declaration public static (FieldInfo field, SerializedPropertyFieldType serializedPropertyFieldType, int? indexArrayElement, object parentObject, object currentObject) GetFieldInfoFromPropertyPath(object targetObject, string propertyPath) Parameters Type Name Description object targetObject object from which the traversal will occur. string propertyPath path that should have semantics completely similar . Returns Type Description (FieldInfo field, SerializedPropertyFieldType serializedPropertyFieldType, int? indexArrayElement, object parentObject, object currentObject) Tuple elements: at end object. SerializedPropertyFieldType — additional information about property. Index in the array if SerializedPropertyFieldType equals ArrayElement. Parent object. Object received from propertyPath starting from targetObject. GetIndexFromArrayProperty(string) Getting index from , if along this path - it returns true.. Declaration public static int GetIndexFromArrayProperty(string dataArray) Parameters Type Name Description string dataArray string representing . Returns Type Description int"
  },
  "api/Paulsams.MicsUtils.SerializedPropertyUtilities.html": {
    "href": "api/Paulsams.MicsUtils.SerializedPropertyUtilities.html",
    "title": "Class SerializedPropertyUtilities",
    "keywords": "Class SerializedPropertyUtilities Utilities associated with class: . Inheritance object SerializedPropertyUtilities Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Paulsams.MicsUtils Assembly: cs.temp.dll.dll Syntax public static class SerializedPropertyUtilities Methods GetManagedReferenceType(string) Gives to from . Declaration public static Type GetManagedReferenceType(string typename) Parameters Type Name Description string typename Returns Type Description Type"
  },
  "api/Paulsams.MicsUtils.ShowUnityObjectAttribute.html": {
    "href": "api/Paulsams.MicsUtils.ShowUnityObjectAttribute.html",
    "title": "Class ShowUnityObjectAttribute",
    "keywords": "Class ShowUnityObjectAttribute Allows you to draw a dropdown inside which the UnityEngine.Object fields will be drawn. For example: ScriptableObject. Inheritance object ShowUnityObjectAttribute Namespace: Paulsams.MicsUtils Assembly: cs.temp.dll.dll Syntax public class ShowUnityObjectAttribute : PropertyAttribute"
  },
  "api/Paulsams.MicsUtils.ShowUnityObjectAttributeDrawer.html": {
    "href": "api/Paulsams.MicsUtils.ShowUnityObjectAttributeDrawer.html",
    "title": "Class ShowUnityObjectAttributeDrawer",
    "keywords": "Class ShowUnityObjectAttributeDrawer Inheritance object ShowUnityObjectAttributeDrawer Namespace: Paulsams.MicsUtils Assembly: cs.temp.dll.dll Syntax public class ShowUnityObjectAttributeDrawer : PropertyDrawer Methods CreatePropertyGUI(SerializedProperty) Declaration public override VisualElement CreatePropertyGUI(SerializedProperty property) Parameters Type Name Description SerializedProperty property Returns Type Description VisualElement GetPropertyHeight(SerializedProperty, GUIContent) Declaration public override float GetPropertyHeight(SerializedProperty property, GUIContent label) Parameters Type Name Description SerializedProperty property GUIContent label Returns Type Description float OnGUI(Rect, SerializedProperty, GUIContent) Declaration public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) Parameters Type Name Description Rect position SerializedProperty property GUIContent label"
  },
  "api/Paulsams.MicsUtils.StringExtensions.html": {
    "href": "api/Paulsams.MicsUtils.StringExtensions.html",
    "title": "Class StringExtensions",
    "keywords": "Class StringExtensions String-related utilities. Inheritance object StringExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Paulsams.MicsUtils Assembly: cs.temp.dll.dll Syntax public static class StringExtensions Methods ClearSpaces(string) Removes all spaces. Declaration public static string ClearSpaces(this string text) Parameters Type Name Description string text Returns Type Description string SplitByUpperSymbols(string) Finds large letters in a line and puts spaces between them. Declaration public static string SplitByUpperSymbols(this string text) Parameters Type Name Description string text Returns Type Description string Examples \"TestSplitOne\".SplitByUpperSymbols() == \"Test Split One\""
  },
  "api/Paulsams.MicsUtils.VisualElementsUtilities.html": {
    "href": "api/Paulsams.MicsUtils.VisualElementsUtilities.html",
    "title": "Class VisualElementsUtilities",
    "keywords": "Class VisualElementsUtilities Utilities associated with class: . Inheritance object VisualElementsUtilities Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Paulsams.MicsUtils Assembly: cs.temp.dll.dll Syntax public static class VisualElementsUtilities Methods SetAlignedLabelFromFoldout(Foldout, out VisualElement, out VisualElement) Creates and returns a container to draw something at the level of the foldout itself, and also returns a checkmark. Declaration public static void SetAlignedLabelFromFoldout(Foldout foldout, out VisualElement containerOnSameRowWithToggle, out VisualElement checkmark) Parameters Type Name Description Foldout foldout Foldout element on which modifications are made. VisualElement containerOnSameRowWithToggle Container is in line with the foldout. VisualElement checkmark Checkmark in foldout."
  },
  "index.html": {
    "href": "index.html",
    "title": "",
    "keywords": "I won't duplicate README, so you can go straight to the Scripting API at top of the page."
  }
}